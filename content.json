{"meta":{"title":"Sun's blog","subtitle":null,"description":"想法以及笔记","author":"Sakuralalala","url":""},"pages":[{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-05-16T14:39:12.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"分类","date":"2020-11-03T14:36:56.000Z","updated":"2020-11-03T14:37:33.336Z","comments":false,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":"","keywords":null},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-05-16T14:39:12.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-05-16T14:39:12.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-05-16T14:39:12.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-05-16T14:39:12.000Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... function bot_ui_ini() { var botui = new BotUI(\"hello-mashiro\"); botui.message.add({ delay: 800, content: \"Hi, there111👋\" }).then(function () { botui.message.add({ delay: 1100, content: \"这里是 Mashiro\" }).then(function () { botui.message.add({ delay: 1100, content: \"一个可爱的蓝孩子~\" }).then(function () { botui.action.button({ delay: 1600, action: [{ text: \"然后呢？ 😃\", value: \"sure\" }, { text: \"少废话！ 🙄\", value: \"skip\" }] }).then(function (a) { \"sure\" == a.value && sure(); \"skip\" == a.value && end() }) }) }) }); var sure = function () { botui.message.add({ delay: 600, content: \"😘\" }).then(function () { secondpart() }) }, end = function () { botui.message.add({ delay: 600, content: \"![...](https://view.moezx.cc/images/2018/05/06/a1c4cd0452528b572af37952489372b6.md.jpg)\" }) }, secondpart = function () { botui.message.add({ delay: 1500, content: \"目前就读于上海财经大学\" }).then(function () { botui.message.add({ delay: 1500, content: \"向往技术却误入商科，但后来喜欢上了经济学…\" }).then(function () { botui.message.add({ delay: 1200, content: \"因为数据分析也需要Coder嘛\" }).then(function () { botui.message.add({ delay: 1500, content: \"主攻 R 语言和 Python，略懂 STATA，偶尔也折腾 HTML/CSS/JavaScript/PHP\" }).then(function () { botui.message.add({ delay: 1500, content: \"研究的方向，是经济/金融方向的数据分析（data science）以及机器学习（machine learning）\" }).then(function () { botui.message.add({ delay: 1800, content: \"喜欢画画，希望有一天能够被称为画师\" }).then(function () { botui.action.button({ delay: 1100, action: [{ text: \"为什么叫Mashiro呢？ 🤔\", value: \"why-mashiro\" }] }).then(function (a) { thirdpart() }) }) }) }) }) }) }) }, thirdpart = function () { botui.message.add({ delay: 1E3, content: \"Mashiro以及站名都来自一部动画，因为和主角有一样的爱好~ 如果有兴趣可以找找首页上的视频~\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"为什么是白猫呢？ 🤔\", value: \"why-cat\" }] }).then(function (a) { fourthpart() }) }) }, fourthpart = function () { botui.message.add({ delay: 1E3, content: \"因为对GitHub有种执念… \" }).then(function () { botui.message.add({ delay: 1100, content: \"而且我真的是猫控！\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"域名有什么含意吗？(ง •_•)ง\", value: \"why-domain\" }] }).then(function (a) { fifthpart() }) }) }) }, fifthpart = function () { botui.message.add({ delay: 1E3, content: \"emmmm，看备案信息你就知道了=.= 本来想要zheng.xin的，但50万真买不起。。\" }).then(function () { botui.message.add({ delay: 1600, content: \"那么，仔细看看我的博客吧？ ^_^\" }) }) } } bot_ui_ini()","keywords":"关于"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-05-16T14:39:12.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"标签","date":"2018-12-12T14:14:16.000Z","updated":"2020-11-03T14:35:42.558Z","comments":false,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-05-16T14:39:12.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2019-05-16T14:39:12.000Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-05-16T14:39:12.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-05-16T14:39:12.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-05-16T14:39:12.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"浅记图形学中的矩阵变换","slug":"浅记图形学中的矩阵变换","date":"2020-11-15T11:12:54.000Z","updated":"2020-11-15T13:17:31.186Z","comments":true,"path":"2020/11/15/浅记图形学中的矩阵变换/","link":"","permalink":"/2020/11/15/浅记图形学中的矩阵变换/","excerpt":"","text":"前言 最近在学习DX的过程中，总是看到一堆矩阵乘法，之前学习unity shader的时候对这部分也是浅尝辄止，这次学习DX的过程中，总算是自己照着推算了一波，其实推算完后，对于一些矩阵变换就十分的清楚了然的，这里记录一下矩阵变换的一些小要点。 世界矩阵与观察矩阵的联系 若已知物体所在的位置$Q=(Q_x, Q_y, Q_z)$以及三个互相垂直的坐标轴$u=(u_x, u_y, u_z)$,$v=(v_x, v_y, v_z)$,$w=(w_x, w_y, w_z)$,并且物体的缩放为1，则可以如下表示物体对于的世界矩阵: $$\\left[\\begin{matrix} u_x &amp; u_y &amp; u_z &amp; 0 \\\\ v_x &amp; v_y &amp; v_z &amp; 0 \\\\ w_x &amp; w_y &amp; w_z &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ \\end{matrix} \\right] \\left[\\begin{matrix} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ Q_x &amp; Q_y &amp; Q_z &amp; 1 \\\\ \\end{matrix} \\right] = \\left[\\begin{matrix} u_x &amp; u_y &amp; u_z &amp; 0 \\\\ v_x &amp; v_y &amp; v_z &amp; 0 \\\\ w_x &amp; w_y &amp; w_z &amp; 0 \\\\ Q_x &amp; Q_y &amp; Q_z &amp; 1 \\\\ \\end{matrix} \\right] $$ 如果将摄像机作为一个物体看待，那么观察空间坐标其实就是摄像机坐标的局部空间，即以上方向为Y轴，以右方向为X轴，以目视方向为Z轴的一个局部坐标空间。不难发现，要得到这个局部空间其实就是将世界空间矩阵逆变换即可。若以空间坐标原点为世界坐标原点则有一下关系： $$V = (RT)^{-1} = T^{-1}R^{-1} = T^{-1}R^{T}$$ $$V = \\left[\\begin{matrix}u_x &amp; v_x &amp; w_x &amp; 0 \\\\ u_y &amp; v_y &amp; w_y &amp; 0 \\\\u_z &amp; v_z &amp; w_z &amp; 0 \\\\-Q \\cdot u &amp; -Q \\cdot v &amp; -Q \\cdot w &amp; 1\\\\\\end{matrix}\\right] $$ 矩阵变化复合 若一个物体经过缩放，旋转，位移的一系列操作，则他的世界矩阵复合是什么形式的呢。由于矩阵乘法不具有交换律，所以矩阵乘法的顺序会影响到计算的结果，如果缩放操作不先进行的话，那么就会使物体产生畸变，所以得先对缩放操作进行处理，之后如果先平移在旋转，则物体会绕着原点进行旋转，如果先旋转再平移，就是先改变物体的朝向，再位移到指定位置。 通常，对物体修改旋转是基于原点位置上旋转，所以它的世界复合变换为： $$ W_n = S_0S_1…S_nR_0R_1…R_nT_0T_1…T_n $$ 如果涉及到父子关系的物体的世界变换则会有点复杂，如unity中,设父物体的缩放，旋转，位移矩阵为S_0,R_0,T_0,子一级物体的缩放，旋转，位移为S_1,R_1,T_1，则第N层子物体的世界复合矩阵如下： $$ W_n = S_0S_1…S_nR_nTnR_{n-1}T_{n-1}…R_0T_0 $$ 对于变换的拆分与旋转矩阵的处理 对于缩放与平移部分，都可以用一个向量来表示，缩放矩阵的连乘可以看作是向量的分量乘法，平移矩阵的连乘可以看作是向量的加法。对于旋转矩阵来说，可以用四元数，以及基于特定坐标轴旋转的三个欧拉角来表示。四元数先不提，之后搞懂四元数再说-。-，使用三个欧拉角来记录旋转矩阵。对于旋转，采用的是先绕Z轴旋转，再绕X轴旋转，最后再绕Y轴旋转，这是为了最大限度的避免万向节死锁问题，要解决万向节死锁可以使用四元数来表示旋转。由Z-X-Y旋转顺序下由欧拉角产生的旋转矩阵如下： $$R_z{\\Theta}_zR_x{\\Theta}_xR_y{\\Theta}_y = \\left[\\begin{matrix} \\cos{\\Theta}_z &amp; \\sin{\\Theta}_z &amp; 0 &amp; 0 \\\\ -\\sin{\\Theta}_z &amp; \\cos{\\Theta}_z &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ \\end{matrix}\\right] \\left[ \\begin{matrix} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; \\cos{\\Theta}_x &amp; \\sin{\\Theta}_x &amp; 0 \\\\ 0 &amp; -\\sin{\\Theta}_x &amp; \\cos{\\Theta}_x &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ \\end{matrix} \\right] \\left[ \\begin{matrix} \\cos{\\Theta}_y &amp; 0 &amp; -\\sin{\\Theta}_y &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 \\\\ \\sin{\\Theta}_y &amp; 0 &amp; \\cos{\\Theta}_y &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ \\end{matrix} \\right] $$ = $$\\left[ \\begin{matrix} \\sin{\\Theta}_z\\sin{\\Theta}_x\\sin{\\Theta}_y + \\cos{\\Theta}_z\\cos{\\Theta}_y &amp; \\sin{\\Theta}_z\\cos{\\Theta}_x &amp; \\sin{\\Theta}_z\\sin{\\Theta}_x\\cos{\\Theta}_y - \\cos{\\Theta}_z\\sin{\\Theta}_y &amp; 0 \\\\ \\cos{\\Theta}_z\\sin{\\Theta}_x\\sin{\\Theta}_y - \\cos{\\Theta}_z\\cos{\\Theta}_y &amp; \\cos{\\Theta}_z\\cos{\\Theta}_x &amp; \\cos{\\Theta}_z\\sin{\\Theta}_x\\cos{\\Theta}_y + \\sin{\\Theta}_z\\sin{\\Theta}_y &amp; 0 \\\\ \\cos{\\Theta}_x\\sin{\\Theta}_y &amp; -\\sin{\\Theta}_x &amp; \\cos{\\Theta}_x\\cos{\\Theta}_y &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ \\end{matrix} \\right] $$ 基于欧拉角的旋转基于欧拉角的旋转很简单，只需要更新欧拉角就行: void Transform::Rotate(const XMFLOAT3&amp; eulerAnglesInRadian) { XMVECTOR newRotationVec = XMVectorAdd(XMLoadFloat3(&amp;m_Rotation), XMLoadFloat3(&amp;eulerAnglesInRadian)); XMStoreFloat3(&amp;m_Rotation, newRotationVec); } 绕轴旋转先根据欧拉角得到旋转矩阵，然后更新旋转矩阵，最后转回欧拉角: void Transform::RotateAxis(const XMFLOAT3&amp; axis, float radian) { XMVECTOR rotationVec = XMLoadFloat3(&amp;m_Rotation); XMMATRIX R = XMMatrixRotationRollPitchYawFromVector(rotationVec) * XMMatrixRotationAxis(XMLoadFloat3(&amp;axis), radian); XMFLOAT4X4 rotMatrix; XMStoreFloat4x4(&amp;rotMatrix, R); m_Rotation = GetEulerAnglesFromRotationMatrix(rotMatrix); } 基于某一点为旋转中心进行绕轴旋转首先根据已有变换算出旋转矩阵*平移矩阵，然后将旋转中心平移到原点，再进行旋转，再平移回旋转中心: void Transform::RotateAround(const XMFLOAT3&amp; point, const XMFLOAT3&amp; axis, float radian) { XMVECTOR rotationVec = XMLoadFloat3(&amp;m_Rotation); XMVECTOR positionVec = XMLoadFloat3(&amp;m_Position); XMVECTOR centerVec = XMLoadFloat3(&amp;point); // 以point作为原点进行旋转 XMMATRIX RT = XMMatrixRotationRollPitchYawFromVector(rotationVec) * XMMatrixTranslationFromVector(positionVec - centerVec); RT *= XMMatrixRotationAxis(XMLoadFloat3(&amp;axis), radian); RT *= XMMatrixTranslationFromVector(centerVec); XMFLOAT4X4 rotMatrix; XMStoreFloat4x4(&amp;rotMatrix, RT); }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"graphic","slug":"graphic","permalink":"/tags/graphic/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"浅识HLSL中矩阵内存与mul函数","slug":"浅识HLSL中矩阵内存与mul函数","date":"2020-11-13T11:59:19.000Z","updated":"2020-11-13T13:37:47.766Z","comments":true,"path":"2020/11/13/浅识HLSL中矩阵内存与mul函数/","link":"","permalink":"/2020/11/13/浅识HLSL中矩阵内存与mul函数/","excerpt":"","text":"前言 最近在学习DX11的过程中可以发现DirectX是主张行主序矩阵的，这与OpenGL主张列矩阵有所不同（这里插一句，B站上3Blue1Brown中的线代教程，也是使用列主序）,所以可以发现DX中的矩阵乘法基本都是写出行向量左乘行主序矩阵的，即mul(vertor， matrix)，初次看可能觉得有点奇怪，毕竟在unity shdaer中的矩阵乘法大部分都是以mul(matrix, vertor)的形式出现，如果不注意就很容易出现计算错误，这里记录一下HLSL中矩阵内存分布以及mul函数。 行主序矩阵与列主序矩阵 对于一段连续的内存，$m_{11}$$m_{12}$$m_{13}$$m_{14}$$m_{21}$$m_{22}$$m_{23}$$m_{24}$$m_{31}$$m_{32}$$m_{33}$$m_{34}$$m_{41}$$m_{42}$$m_{43}$$m_{44}$ 行主序中，内存排布如下:$$M =\\left[\\begin{matrix}m_{11} &amp; m_{12} &amp; m_{13} &amp; m_{14} \\\\ m_{21} &amp; m_{22} &amp; m_{23} &amp; m_{24} \\\\m_{31} &amp; m_{32} &amp; m_{33} &amp; m_{34} \\\\m_{41} &amp; m_{42} &amp; m_{43} &amp; m_{44}\\\\\\end{matrix}\\right] $$ 列主序中， 内存排布如下:$$M =\\left[\\begin{matrix}m_{11} &amp; m_{21} &amp; m_{31} &amp; m_{41} \\\\ m_{12} &amp; m_{22} &amp; m_{32} &amp; m_{42} \\\\m_{13} &amp; m_{23} &amp; m_{33} &amp; m_{43} \\\\m_{14} &amp; m_{24} &amp; m_{34} &amp; m_{44}\\\\\\end{matrix}\\right] $$ 可以看出行主序与列主序互为转置矩阵，由线代知识可知：$(vM)^T = M^T v^T$ C++与HLSL中的矩阵内存布局 在C++中，矩阵都是以行主序矩阵的形式存储的，即对于一串数据$m_{11}$$m_{12}$$m_{13}$$m_{14}$$m_{21}$$m_{22}$$m_{23}$$m_{24}$$m_{31}$$m_{32}$$m_{33}$$m_{34}$$m_{41}$$m_{42}$$m_{43}$$m_{44}$，在C++中是以如下形式解释的: cb0[0].xyzw = {m11, m12, m13, m14}; cb0[1].xyzw = {m21, m22, m23, m24}; cb0[2].xyzw = {m31, m32, m33, m34}; cb0[3].xyzw = {m41, m42, m43, m44}; 在HLSL中默认的矩阵无论是matrix还是float4x4都是以列主序的形式解释的，即如果做处理，HLSL从寄存器中读取数据会是如下形式: $$M =\\left[\\begin{matrix}m_{11} &amp; m_{21} &amp; m_{31} &amp; m_{41} \\\\ m_{12} &amp; m_{22} &amp; m_{32} &amp; m_{42} \\\\m_{13} &amp; m_{23} &amp; m_{33} &amp; m_{43} \\\\m_{14} &amp; m_{24} &amp; m_{34} &amp; m_{44}\\\\\\end{matrix}\\right] $$ 可见HLSL读取数据的时候会把矩阵进行转置，其原因就是C++的矩阵数据以行主序存储，而HLSL以列矩阵存储，所以为了保证计算结果的准确性，有一下几种方法: C++端先进行一次转置C++端转置后，在传入寄存器之中，这样HLSL读取数据之后又会将其变成“行主序矩阵”，并且以行向量左乘矩阵，这时候可以发现，矩阵在乘法过程中取矩阵的列很方便，因为是一段连续的内存。 HLSL端进行转置在HLSL中，可以将矩阵从列主序矩阵转置为行主序矩阵，(row_major) matrix g_World;但是这种方法在进行矩阵运算的时候会产生额外的转置操作，性能上有损失。 C++端不转置，HLSL默认列矩阵，以mul(matrix, vertor)形式C++端不进行转置操作，HLSL中也默认列主序矩阵，但是在mul函数将向量放到右边。即是列主序矩阵左乘列向量，这也是我们在unity shader中见到的最常见的矩阵乘法的形式，原因就是unity shader中大量默认的矩阵都是以列主序矩阵的形式存在的。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"graphic","slug":"graphic","permalink":"/tags/graphic/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"近期规划","slug":"近期规划","date":"2020-11-02T13:56:57.000Z","updated":"2020-11-02T15:03:06.439Z","comments":true,"path":"2020/11/02/近期规划/","link":"","permalink":"/2020/11/02/近期规划/","excerpt":"","text":"前言 距离上一次写下文章已经过去了快一年半了，2019年的8月收获了网易雷火的客户端开发offer，到如今入职已经快4个月，真的是感觉时间飞快。入职后也感觉自主学习的时间越来越少，每次感叹就后悔大四上学期那么好的一段空闲时光没能好好利用起来，着实有些遗憾。预期抱怨，不如来干点实事，其实7月多的时候已经给自己定下了这一阶段的目标，经过之前一次和互娱的学长的交流，也越来越明确自己感兴趣的发展方向，就记录在这里吧。 目标 经过这几个月自己的探索以及与周围大佬的交流，自己给自己定下一个目标：在保证本职工作完成好的情况下，努力向技术美术转型。至于选择TA作为自己的职业发展目标呢，是因为我自己的确是对一些炫酷的效果或者画面感兴趣，同时对于渲染方面也有浓厚的兴趣。比起那些复杂的数据处理，自己还是更喜欢那些能够看得见的效果，同时在面试的时候也是和面试官直接说了自己向转TA的意愿，虽然当时可能对TA的了解不是非常的理解，但是如今算是明确了自己的职业规划。 学习路径 这里给自己规划一下学习的路径，希望自己能够坚持下去，能够不忘初心。 图形学基础巩固 DirectX11学习之前对于图形学学的不够扎实，也只是拘泥于表面的一些shader效果的实现，而没有关注于底层的原理，所以首先就是要加深对于图形学基础知识的学习。我选择以DirectX11作为载体进行学习，选择它的原因首先是DirectX11采用的shader语言与Unity中shader的语言基本一致，都是HLSL，所以在于一些结构上的理解会更加容易，例如顶点着色器输入与输出结构体中的变量为什么有后面的一串语义，为什么这些顶点信息能够被传入着色器中，以及mul函数对于左乘与右乘的区别等等这些概念都能够很好的理解；其次就是环境配置较为简单，Win10系统中DirecxtSDK已经被集成到WindowsSDK中，比起OpenGL那繁琐的环境配置，我们可以非常方便的创建DirectX项目。 用Unity实现一些渲染效果主要就是对于知乎收藏的一大堆效果进行复现，并且分析其中的原理，着重关注算法本身。 阅读《全局光照技术》之前入手的一本GI的书，里面详细讲解各种光照的实现算法，准备阅读学习一番，然后用unity去实现其中的算法。 特效学习 特效制作学习主要学习B站上收藏的一些特效教程，以及youtube上也有一些合适的教程。 特效思路分析主要有空的时候多浏览下A站的特效，里面的效果真的令人兴奋，主要分析一下特效制作的思路与灵感。 程序化生成 Subtance Designer主要学习程序化纹理的制作 Houdini主要学习程序化建模 编程能力提升 C++ primer plus leetCode算法题 骨骼动画 美术知识提升 基础的审美，色彩，打光，环境氛围等等 慢慢学画画，目前能画贴图就行 DCC工具学习，例如Blender 当前进度 目前正在学习DirectX11，入门篇看完准备写个小笔记然后接着看进阶篇，同时C++也在看。对于特效，自己试着做了一个小小的效果，虽然是个小效果，但是当做出来的时候，还是挺有成就感的~对于程序化生成先等啃完图形基础在进行，毕竟程序化生成也是对各种图形图像的处理。美术部分则就抽出学的很累，或者某些浮躁的时候这时候花点时间随便画画，或者建建模型，舒缓一下。","categories":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}],"tags":[{"name":"随想","slug":"随想","permalink":"/tags/随想/"}],"keywords":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}]},{"title":"第一篇博客","slug":"第一篇博客","date":"2019-05-24T11:24:49.000Z","updated":"2020-11-02T15:03:03.533Z","comments":true,"path":"2019/05/24/第一篇博客/","link":"","permalink":"/2019/05/24/第一篇博客/","excerpt":"","text":"2019.05.24上机教室的我写下这第一篇博客，算是给兵荒马乱的找实习生活画上一个句号。3月1号接到第一通腾讯的面试电话，可以说是人生中的第一次面试，现在看起来其实也没有什么不同，也不过是介绍了自己的项目，以及一些基础知识。第一次面试结果却不如我所想，本以为至少一面能过，却没想到一面直接就被面试官给灰掉了，回想倒也是，基础知识当时全都没复习，红黑树之类的知识当时完全没了解。第二天发现又被捞了… 第二次面试电话依然是腾讯，3月7号的晚上，当时记得很清楚，吃完饭的时候还在郁闷第一次的面试，结果面试电话就打过来了，这次是感觉最好的一次面试，面试官很和蔼，一直耐心的听我讲项目，所以最后也慢慢的不紧张，完全放下来了，晚上从启明回来查状态进入复试… 第三次面试电话还是腾讯，复试电话。只记得前一天晚上紧张的睡不着觉,其实越在意，结果就越可能不如人愿…3月12号下午，第三次电话，腾讯复试。面试的细节倒是记得不多，只记得面了几道开放式的题目，例如三消游戏的思路，弹幕游戏的弹幕管理，当时的情况下，自己完全无法冷静下来去思考，之前的面试全都是讲自己的项目或者一些基础知识，突然问开放式的题，当时直接懵了，其实静下来仔细想一想也能够有些想法…虽然体验不佳但是第三次面试也是跌跌撞撞的过了，然后到了总监面的环节，也是最难受的环节。3月16号，总监面电话，依然是让介绍项目，然后就问自己的优缺点，总共也就20min左右，然后就是漫长的等待环节，一周后，也就是提前批结束前一周，灰了，代表着提前批就这样结束了，学长的直推机会都没用了，以至于到正式批都没有给我发起面试，前几天，学长问我实习情况时，我才知道飞车项目组把我简历迟放了，导致正式批都没有面试机会，可以说找实习真的是运气也有很大的关系… 4月是煎熬的，做完腾讯的正式批笔试，却一直没有被发起面试，当时情绪都崩溃了不知道多少次…只记得，一个人坐在启明12楼的角落等待着面试电话，然后又是失望的回宿舍，不过还好，最后还是拿到了巨人的实习offer，待遇也还算可以。当时是7号去现场面试的，只是简单的面试完就让我回去了，当时还以为又没机会了，结果在回去的火车上接到了hr的电话，8号下午算是终于拿到了实习offer，结束了0offer的生活，现在回想起来一路还是坎坷，其实所有的难过都是自己的实力不足所导致的，接下来就是继续充实自己，这也是我决定搭建自己博客的原因，记录下自己的随想以及技术笔记，算是留下一个痕迹吧。 最后，感谢找实习时期给自己许多帮助的学长，老师，真的非常感谢他们，不然自己可能挺不过来。总之，前路还在继续，故事还没结束…","categories":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}],"tags":[{"name":"随想","slug":"随想","permalink":"/tags/随想/"}],"keywords":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-05-23T02:55:46.969Z","updated":"2019-05-24T12:40:39.707Z","comments":true,"path":"2019/05/23/hello-world/","link":"","permalink":"/2019/05/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}